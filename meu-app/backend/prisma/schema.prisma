datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Users {
  id                  Int                           @id @default(autoincrement())
  nome                String
  sobrenome           String
  email               String                        @unique
  cpf                 String                        @unique
  senha               String
  createdAt           DateTime                      @default(now())
  updatedAt           DateTime                      @updatedAt
  passwordResetTokens PasswordResetToken[]
  userDiabetes        User_diabetes[]
  userMedicacoes      User_medicacao[]
  metasGlicemicas     Meta_Glicemia[]
  userLembretes       User_Lembretes[]
  userInsulinas       User_insulina[]
  userAdminInsulinas  User_administracao_insulina[]
  userGlicemia        User_Glicemia[]
  userPressaoArterial User_Pressao_Arterial[]
  User_peso           User_peso[]
}

model PasswordResetToken {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model User_diabetes {
  id         Int           @id @default(autoincrement())
  user       Users         @relation(fields: [userId], references: [id])
  userId     Int
  diabetes   Tipo_diabetes @relation(fields: [diabetesId], references: [id])
  diabetesId Int
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Tipo_diabetes {
  id           Int             @id @default(autoincrement())
  nome         String
  userDiabetes User_diabetes[]
}

model Tipo_tratamento {
  id             Int              @id @default(autoincrement())
  nome           String
  User_medicacao User_medicacao[]
}

model User_medicacao {
  id                      Int             @id @default(autoincrement())
  user                    Users           @relation(fields: [userId], references: [id])
  userId                  Int
  medicamento             String
  tipoDosagem             String
  dosagemPorAdministracao String
  tipoTratamento          Tipo_tratamento @relation(fields: [tipoTratamentoId], references: [id])
  tipoTratamentoId        Int
  dosesRestantes          Int
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
}

model Meta_Glicemia {
  id        Int               @id @default(autoincrement())
  user      Users             @relation(fields: [userId], references: [id])
  userId    Int
  periodo   Periodo_glicemico @relation(fields: [periodoId], references: [id])
  periodoId Int
  metaMin   Int
  metaIdeal Int
  metaMax   Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  isAtual   Boolean
}

model Periodo_glicemico {
  id              Int             @id @default(autoincrement())
  nome            String
  metasGlicemicas Meta_Glicemia[]
}

model User_Lembretes {
  id         Int      @id @default(autoincrement())
  user       Users    @relation(fields: [userId], references: [id])
  userId     Int
  lembrete   Lembrete @relation(fields: [lembreteId], references: [id])
  lembreteId Int
  dataInicio DateTime
  dataFim    DateTime
  horarios   Json
  isAtivo    Boolean
  createdAt  DateTime @default(now())
}

model Lembrete {
  id            Int              @id @default(autoincrement())
  nome          String
  userLembretes User_Lembretes[]
}

model User_administracao_insulina {
  id              Int                    @id @default(autoincrement())
  user            Users                  @relation(fields: [userId], references: [id])
  userId          Int
  adminInsulina   Administracao_insulina @relation(fields: [adminInsulinaId], references: [id])
  adminInsulinaId Int
  createdAt       DateTime               @default(now())
  updatedAt       DateTime               @updatedAt
}

model Administracao_insulina {
  id                Int                           @id @default(autoincrement())
  nome              String
  userAdminInsulina User_administracao_insulina[]
}

model User_insulina {
  id         Int      @id @default(autoincrement())
  user       Users    @relation(fields: [userId], references: [id])
  userId     Int
  insulina   String
  dosagemQtd Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Tipo_Glicemia {
  id            Int             @id @default(autoincrement())
  nome          String
  User_Glicemia User_Glicemia[]
}

model User_Glicemia {
  id         Int           @id @default(autoincrement())
  user       Users         @relation(fields: [userId], references: [id])
  userId     Int
  glicemia   Tipo_Glicemia @relation(fields: [glicemiaId], references: [id])
  glicemiaId Int
  value      Int
  createdAt  DateTime      @default(now())
}

model User_Pressao_Arterial {
  id         Int      @id @default(autoincrement())
  user       Users    @relation(fields: [userId], references: [id])
  userId     Int
  sistolica  Int
  diastolica Int
  date       String
  time       String
  createdAt  DateTime @default(now())
}

model User_peso {
  id        Int      @id @default(autoincrement())
  user      Users    @relation(fields: [userId], references: [id])
  userId    Int
  peso      Float
  createdAt DateTime @default(now())
}
